worker_processes  1;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;

    keepalive_timeout  65;

    types_hash_max_size 4096;
    server_names_hash_bucket_size 128;

    # nginx may need to resolve domain names at run time
    # use Google DNS servers
    # use only IPv4 addresses
    resolver 8.8.8.8 8.8.4.4 ipv6=off;

    # Pacman Cache
    server
    {
        listen      80;
        server_name your_server_name;
        root        /srv/http/pacman-cache;
        autoindex   on;

        # ARMV7H
        location /armv7h/ {
             # Requests for package db, signature files and files db should redirect upstream without caching
             location ~ \.(db|sig|files)$ {
                 proxy_pass http://rp_mirrors$request_uri;
             }

             # Requests for actual packages should be served directly from cache if available.
             #   If not available, retrieve and save the package from an upstream mirror.
             location ~ \.tar\.(xz|zst)$ {
                 try_files $uri @rp_pkg_mirror;
             }
        }

        # Retrieve package from upstream mirrors and cache for future requests
        location @rp_pkg_mirror {
            proxy_store    on;
            proxy_redirect off;
            proxy_store_access  user:rw group:rw all:r;
            proxy_next_upstream error timeout http_404;
            proxy_pass          http://rp_mirrors$request_uri;
        }

        # x86_64
        location /archlinux/ {
             # same as for ARMV7H, except that some variables are no prefixed with "pc_" instead of "rp_"
             location ~ \.(db|sig|files)$ {
                 proxy_pass http://pc_mirrors$request_uri;
             }

             location ~ \.tar\.(xz|zst)$ {
                 try_files $uri @pc_pkg_mirror;
             }
        }

        location @pc_pkg_mirror {
            proxy_store    on;
            proxy_redirect off;
            proxy_store_access  user:rw group:rw all:r;
            proxy_next_upstream error timeout http_404;
            proxy_pass          http://pc_mirrors$request_uri;
        }
    }

    # Upstream Arch Linux Mirrors
    # - Configure as many backend mirrors as you want in the blocks below
    # - Servers are used in a round-robin fashion by nginx
    # - Add "backup" if you want to only use the mirror upon failure of the other mirrors
    # - Use separate mirror server blocks to be able to use mirrors that have different paths to the package repos
    upstream rp_mirrors {
        server 127.0.0.1:8001;
        server 127.0.0.1:8002 backup;
        server 127.0.0.1:8003 backup;
    }

    upstream pc_mirrors {
        server 127.0.0.1:8004;
# TBD       server 127.0.0.1:8005 backup;
# TBD       server 127.0.0.1:8006 backup;
    }

    # If you want to use an official mirror from /etc/pacman.d/mirrorlist like
    # ARMV7H: http://mirror.domain.example/$arch/$repo
    # x86_64: http://mirror.domain.example/path/to/repo/$repo/os/$arch
    #
    # the proxy_pass directive should look like this, e.g. for x86_64:
    # proxy_pass http://mirror.domain.example/path/to/repo$request_uri;
    #
    # Notice that $request_uri replaces e.g. the /$repo/os/$arch part of
    # the mirror address. See more examples below.

    # Arch Mirror for ARMV7H
    server
    {
        listen      127.0.0.1:8001;

        location / {
            proxy_pass       http://fl.us.mirror.archlinuxarm.org$request_uri;
        }
    }

    # Arch Mirror for ARMV7H
    server
    {
        listen      127.0.0.1:8002;

        location / {
            proxy_pass       http://ca.us.mirror.archlinuxarm.org$request_uri;
        }
    }

    # Arch Mirror for ARMV7H
    server
    {
        listen      127.0.0.1:8003;

        location / {
            proxy_pass       http://il.us.mirror.archlinuxarm.org$request_uri;
        }
    }

    # Arch Mirror for x86_64
    server
    {
        listen      127.0.0.1:8004;

        location / {
            proxy_pass       https://mirrors.acm.wpi.edu$request_uri;
        }
    }
}
